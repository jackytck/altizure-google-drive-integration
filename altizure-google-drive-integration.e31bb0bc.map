{"version":3,"sources":["config.js","helper.js","altizure.js","google.js","index.js"],"names":["ALTI_KEY","ALTI_CALLBACK","G_DEV_KEY","G_CLIENT_ID","G_SCOPE","randomState","length","text","possible","i","charAt","Math","floor","random","setCookie","name","value","days","expires","date","Date","setTime","getTime","toUTCString","document","cookie","getCookie","parts","split","pop","shift","deleteCookie","tokenStateFromHash","token","state","hash","window","location","re","mat","exec","ALTI_TOKEN","selectedFiles","onLogout","href","onUpload","pid","getElementById","alert","forEach","f","uploadSingle","url","link","md5","global","oauthToken","query","gql","then","res","console","log","data","updateImageList","setInterval","headers","Headers","body","JSON","stringify","init","method","request","Request","fetch","response","json","renderUpload","divId","u","URL","searchParams","get","user","my","self","html","innerHTML","imgs","project","allImages","edges","map","x","node","pickerCallback","folderId","google","picker","Response","ACTION","Action","PICKED","doc","DOCUMENTS","Document","ID","queryFiles","gapi","client","drive","files","list","q","fields","pageSize","result","renderFiles","err","error","fileNames","push","originalFilename","id","md5Checksum","join","render","tokenCookie","prevState","origin","pathname","authUrl","pickerApiLoaded","callback","setupGoogle","onApiLoad","load","onAuthApiLoad","onPickerApiLoad","authBtn","disabled","addEventListener","auth2","authorize","client_id","scope","handleAuthResult","createPicker","authResult","access_token","createClient","pickFolderView","DocsView","setIncludeFolders","setMimeTypes","setSelectFolderEnabled","apiKey","clientId","discoveryDocs","PickerBuilder","addView","setOAuthToken","setDeveloperKey","setCallback","build","setVisible"],"mappings":"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","file":"altizure-google-drive-integration.e31bb0bc.map","sourceRoot":"..","sourcesContent":["export const ALTI_KEY = '7MkQf8UggsPaadvrlKALspJWZejZAJOLHn3cnIy'\nexport const ALTI_CALLBACK = 'https://jackytck.github.io/altizure-google-drive-integration/index.html'\n\nexport const G_DEV_KEY = 'AIzaSyAeyIi9-LcFHT3cplvMkQl8q9-3Ur-iUu8'\nexport const G_CLIENT_ID = '753960030086-5k9v19hregov1kjboto79qavpgfbjt4p.apps.googleusercontent.com'\nexport const G_SCOPE = 'https://www.googleapis.com/auth/drive.readonly'\n","function randomState (length) {\n  let text = ''\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length))\n  }\n  return text\n}\n\nfunction setCookie (name, value, days) {\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = '; expires=' + date.toUTCString()\n  }\n  document.cookie = name + '=' + value + expires + ';path=/;secure'\n}\n\nfunction getCookie (name) {\n  const value = '; ' + document.cookie\n  const parts = value.split('; ' + name + '=')\n  if (parts.length === 2) {\n    return parts.pop().split(';').shift()\n  }\n}\n\nfunction deleteCookie (name) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/'\n}\n\nfunction tokenStateFromHash () {\n  let token = ''\n  let state = ''\n  const hash = window.location.hash\n  const re = /access_token=(\\w+).*state=(\\w+)/g\n  const mat = re.exec(hash)\n  if (mat && mat[1] && mat[2]) {\n    token = mat[1]\n    state = mat[2]\n  }\n  return { token, state }\n}\n\nexport {\n  randomState,\n  setCookie,\n  getCookie,\n  deleteCookie,\n  tokenStateFromHash\n}\n","/* global gapi, google */\nimport {\n  ALTI_CALLBACK,\n  ALTI_KEY\n} from './config'\nimport {\n  deleteCookie,\n  getCookie,\n  randomState,\n  setCookie,\n  tokenStateFromHash\n} from './helper'\n\nlet ALTI_TOKEN = ''\nlet selectedFiles = []\n\nfunction onLogout () {\n  deleteCookie('token')\n  window.location.href = ALTI_CALLBACK\n}\n\nfunction onUpload () {\n  const pid = document.getElementById('pid').value\n  if (!pid) {\n    alert('Enter pid!')\n    return\n  }\n  if (!selectedFiles.length) {\n    alert('No file is selected!')\n  }\n  selectedFiles.forEach(f => {\n    uploadSingle(({\n      pid,\n      name: f.name,\n      url: f.link,\n      md5: f.md5,\n      token: global.oauthToken\n    }))\n  })\n}\n\nfunction uploadSingle ({ pid, name, url, md5, token }) {\n  const query = `\n    mutation {\n      uploadImageURL(pid: \"${pid}\", url: \"${url}\", filename: \"${name}\", token: \"${token}\") {\n        id\n      }\n    }\n  `\n  gql({ query, token: ALTI_TOKEN }).then(res => {\n    console.log(res.data)\n    updateImageList()\n  })\n  setInterval(updateImageList, 5000)\n}\n\nfunction gql ({ query, token }) {\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'key': ALTI_KEY,\n    'altitoken': token\n  })\n  const body = JSON.stringify({\n    query\n  })\n  const init = {\n    method: 'POST',\n    headers,\n    body\n  }\n  const request = new Request('https://api.altizure.com/graphql', init)\n  return fetch(request).then(function (response) {\n    return response.json()\n  })\n}\n\nfunction renderUpload (divId, token) {\n  const u = new URL(window.location.href)\n  const pid = u.searchParams.get('pid') || ''\n  const query = `\n  {\n    my {\n      self {\n        name\n      }\n    }\n  }\n  `\n  gql({ query, token }).then(res => {\n    const user = res.data.my.self.name\n    const html = `\n            <h3>Welcome ${user}!</h3>\n            <p>1. Press Google Drive</p>\n            <p>2. Enter pid</p>\n            <p>3. Press Upload</p>\n            <input type=\"text\" id=\"pid\" name=\"pid\" placeholder=\"pid\" value=\"${pid}\" />\n            <button onclick=\"onUpload()\">Upload</button>\n            <div><div id=\"file-list\" /></div>\n            <div><div id=\"image-list\" /></div>\n            <br/>\n            <br/>\n            <button onclick=\"onLogout()\">Logout</button>\n          `\n    document.getElementById(divId).innerHTML = html\n  })\n}\n\nfunction updateImageList () {\n  const pid = document.getElementById('pid').value\n  const query = `\n  {\n  \tproject(id: \"${pid}\") {\n      allImages {\n        totalCount\n        edges {\n          node {\n            id\n            state\n            name\n            filename\n          }\n        }\n      }\n    }\n  }\n  `\n  gql({ query, token: ALTI_TOKEN }).then(res => {\n    const imgs = res.data.project.allImages.edges.map(x => `<li>${x.node.name}: ${x.node.state}</li>`)\n    document.getElementById('image-list').innerHTML = `<p>Project images:</p><ol>${imgs}</ol>`\n  })\n}\n\n// function onSuccess (files) {\n//   selectedFiles = []\n//   const fileNames = []\n//   for (let i = 0; i < files.length; i++) {\n//     fileNames.push(`<li>${files[i].name}</li>`)\n//     selectedFiles.push(files[i])\n//   }\n//   document.getElementById('file-list').innerHTML = `<p>Selected files:</p><ol>${fileNames.join('')}</ol>`\n// }\n\n// A simple callback implementation.\nfunction pickerCallback (data) {\n  let folderId = ''\n  if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n    const doc = data[google.picker.Response.DOCUMENTS][0]\n    folderId = doc[google.picker.Document.ID]\n    queryFiles(folderId)\n  }\n}\n\nfunction queryFiles (folderId) {\n  gapi.client.drive.files.list({\n    q: `'${folderId}' in parents`,\n    fields: 'files(id,originalFilename,fileExtension,md5Checksum)',\n    pageSize: 1000\n  })\n    .then(function (response) {\n      // Handle the results here (response.result has the parsed body).\n      console.log('Result', response.result)\n      renderFiles(response.result.files)\n    },\n    function (err) {\n      console.error('Execute error', err)\n    })\n}\n\n/**\n * {\n *  id: \"0B574oGEFI9O6QWE0ejZQVnREckE\"\n *  md5Checksum: \"47399b72b3698ece2f33990bda3b6fe9\"\n *  originalFilename: \"DJI_0104.JPG\"\n * }\n */\nfunction renderFiles (files) {\n  selectedFiles = []\n  const fileNames = []\n  files.forEach(f => {\n    fileNames.push(`<li>${f.originalFilename}</li>`)\n    selectedFiles.push({\n      name: f.originalFilename,\n      url: `https://www.googleapis.com/drive/v3/files/${f.id}?alt=media`,\n      md5: f.md5Checksum\n    })\n  })\n  document.getElementById('file-list').innerHTML = `<p>Selected files:</p><ol>${fileNames.join('')}</ol>`\n}\n\nfunction render (divId) {\n  const tokenCookie = getCookie('token')\n  if (!tokenCookie) {\n  // not login\n    const { token, state } = tokenStateFromHash()\n    if (token && state) {\n    // callback\n      const prevState = getCookie('state')\n      if (state !== prevState) {\n        document.getElementById(divId).innerHTML = '<h1>Invalid state!</h1>'\n      } else {\n        setCookie('token', token, 90)\n        deleteCookie('state')\n        ALTI_TOKEN = tokenCookie\n        window.location = `${window.location.origin}/${window.location.pathname}`\n        renderUpload(divId, token)\n        // setupGoogleDrive()\n      }\n    } else {\n    // render auth button\n      const state = randomState(20)\n      setCookie('state', state)\n      const authUrl = `https://api.altizure.com/auth/start?client_id=${ALTI_KEY}&response_type=token&redirect_uri=${ALTI_CALLBACK}&state=${state}`\n      document.getElementById(divId).innerHTML = `\n            <h1>Altizure Google Drive Demo</h1>\n            <button type='reset' onclick=\"location.href='${authUrl}'\">\n              Login with Altizure account\n            </button>\n          `\n    }\n  } else {\n    ALTI_TOKEN = tokenCookie\n    renderUpload(divId, tokenCookie)\n    // setupGoogleDrive()\n  }\n}\n\nexport {\n  onLogout,\n  onUpload,\n  pickerCallback,\n  render\n}\n","/* global gapi, google */\nimport {\n  G_CLIENT_ID,\n  G_DEV_KEY,\n  G_SCOPE\n} from './config'\n\nlet pickerApiLoaded = false\nlet oauthToken\nlet callback\n\nfunction setupGoogle (pickerCallback) {\n  callback = pickerCallback\n  return onApiLoad\n}\n\n// Use the API Loader script to load google.picker and gapi.auth.\nfunction onApiLoad () {\n  gapi.load('client:auth2', onAuthApiLoad)\n  gapi.load('picker', onPickerApiLoad)\n}\n\nfunction onAuthApiLoad () {\n  const authBtn = document.getElementById('auth')\n  authBtn.disabled = false\n  authBtn.addEventListener('click', function () {\n    if (!oauthToken) {\n      gapi.auth2.authorize({\n        client_id: G_CLIENT_ID,\n        scope: G_SCOPE\n      }, handleAuthResult)\n    } else {\n      createPicker()\n    }\n  })\n}\n\nfunction onPickerApiLoad () {\n  pickerApiLoaded = true\n  createPicker()\n}\n\nfunction handleAuthResult (authResult) {\n  if (authResult && !authResult.error) {\n    oauthToken = authResult.access_token\n    global.oauthToken = oauthToken\n    createPicker()\n    createClient()\n  } else {\n    console.error(authResult)\n  }\n}\n\nfunction pickFolderView () {\n  return new google.picker.DocsView()\n    .setIncludeFolders(true)\n    .setMimeTypes('application/vnd.google-apps.folder')\n    .setSelectFolderEnabled(true)\n}\n\nfunction createClient () {\n  gapi.client.init({\n    apiKey: G_DEV_KEY,\n    clientId: G_CLIENT_ID,\n    discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n    scope: G_SCOPE\n  }).then(() => console.log('gapi client loaded'))\n}\n\n// Create and render a Picker object for picking user Photos.\nfunction createPicker () {\n  if (pickerApiLoaded && oauthToken) {\n    const picker = new google.picker.PickerBuilder()\n      .addView(pickFolderView())\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(G_DEV_KEY)\n      .setCallback(callback)\n      .build()\n    picker.setVisible(true)\n  }\n}\n\nexport default setupGoogle\n","import {\n  onLogout,\n  onUpload,\n  pickerCallback,\n  render\n} from './altizure'\n\nimport setupGoogle from './google'\n\nglobal.onUpload = onUpload\nglobal.onLogout = onLogout\n\nglobal.onApiLoad = setupGoogle(pickerCallback)\nrender('altizure-container')\n"]}