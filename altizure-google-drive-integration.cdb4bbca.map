{"version":3,"sources":["config.js","helper.js","altizure.js","google.js","index.js"],"names":["ALTI_KEY","ALTI_CALLBACK","G_DEV_KEY","G_CLIENT_ID","G_SCOPE","randomState","length","text","possible","i","charAt","Math","floor","random","setCookie","name","value","days","expires","date","Date","setTime","getTime","toUTCString","document","cookie","getCookie","parts","split","pop","shift","deleteCookie","tokenStateFromHash","token","state","hash","window","location","mat","exec","ALTI_TOKEN","selectedFiles","onLogout","href","onUpload","pid","getElementById","alert","forEach","f","uploadSingle","url","link","gql","query","then","res","console","log","data","updateImageList","setInterval","headers","Headers","body","JSON","stringify","request","Request","method","fetch","response","json","renderUpload","divId","u","URL","searchParams","get","user","my","self","html","innerHTML","imgs","project","allImages","edges","map","x","node","pickerCallback","google","picker","Response","ACTION","Action","PICKED","DOCUMENTS","Document","message","render","tokenCookie","origin","pathname","authUrl","setupGoogle","oauthToken","callback","pickerApiLoaded","onApiLoad","gapi","load","onAuthApiLoad","onPickerApiLoad","authBtn","disabled","addEventListener","auth2","authorize","client_id","scope","handleAuthResult","createPicker","authResult","error","access_token","PickerBuilder","addView","ViewId","DOCS_IMAGES","setOAuthToken","setDeveloperKey","setCallback","build","setVisible","global"],"mappings":"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","file":"altizure-google-drive-integration.cdb4bbca.map","sourceRoot":"..","sourcesContent":["export const ALTI_KEY = '7MkQf8UggsPaadvrlKALspJWZejZAJOLHn3cnIy'\nexport const ALTI_CALLBACK = 'https://jackytck.github.io/altizure-google-drive-integration/index.html'\n\nexport const G_DEV_KEY = 'AIzaSyAeyIi9-LcFHT3cplvMkQl8q9-3Ur-iUu8'\nexport const G_CLIENT_ID = '753960030086-5k9v19hregov1kjboto79qavpgfbjt4p.apps.googleusercontent.com'\nexport const G_SCOPE = 'https://www.googleapis.com/auth/drive'\n","function randomState (length) {\n  let text = ''\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length))\n  }\n  return text\n}\n\nfunction setCookie (name, value, days) {\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = '; expires=' + date.toUTCString()\n  }\n  document.cookie = name + '=' + value + expires + ';path=/;secure'\n}\n\nfunction getCookie (name) {\n  const value = '; ' + document.cookie\n  const parts = value.split('; ' + name + '=')\n  if (parts.length === 2) {\n    return parts.pop().split(';').shift()\n  }\n}\n\nfunction deleteCookie (name) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/'\n}\n\nfunction tokenStateFromHash () {\n  let token = ''\n  let state = ''\n  const hash = window.location.hash\n  const re = /access_token=(\\w+).*state=(\\w+)/g\n  const mat = re.exec(hash)\n  if (mat && mat[1] && mat[2]) {\n    token = mat[1]\n    state = mat[2]\n  }\n  return { token, state }\n}\n\nexport {\n  randomState,\n  setCookie,\n  getCookie,\n  deleteCookie,\n  tokenStateFromHash\n}\n","/* global google */\nimport {\n  ALTI_CALLBACK,\n  ALTI_KEY\n} from './config'\nimport {\n  deleteCookie,\n  getCookie,\n  randomState,\n  setCookie,\n  tokenStateFromHash\n} from './helper'\n\nlet ALTI_TOKEN = ''\nlet selectedFiles = []\n\nfunction onLogout () {\n  deleteCookie('token')\n  window.location.href = ALTI_CALLBACK\n}\n\nfunction onUpload () {\n  const pid = document.getElementById('pid').value\n  if (!pid) {\n    alert('Enter pid!')\n    return\n  }\n  if (!selectedFiles.length) {\n    alert('No file is selected!')\n  }\n  selectedFiles.forEach(f => {\n    uploadSingle(({\n      pid,\n      name: f.name,\n      url: f.link\n    }))\n  })\n}\n\nfunction uploadSingle ({ pid, name, url }) {\n  const query = `\n    mutation {\n      uploadImageURL(pid: \"${pid}\", url: \"${url}\", filename: \"${name}\") {\n        id\n      }\n    }\n  `\n  gql({ query, token: ALTI_TOKEN }).then(res => {\n    console.log(res.data)\n    updateImageList()\n  })\n  setInterval(updateImageList, 5000)\n}\n\nfunction gql ({ query, token }) {\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'key': ALTI_KEY,\n    'altitoken': token\n  })\n  const body = JSON.stringify({\n    query\n  })\n  const init = {\n    method: 'POST',\n    headers,\n    body\n  }\n  const request = new Request('https://api.altizure.com/graphql', init)\n  return fetch(request).then(function (response) {\n    return response.json()\n  })\n}\n\nfunction renderUpload (divId, token) {\n  const u = new URL(window.location.href)\n  const pid = u.searchParams.get('pid') || ''\n  const query = `\n  {\n    my {\n      self {\n        name\n      }\n    }\n  }\n  `\n  gql({ query, token }).then(res => {\n    const user = res.data.my.self.name\n    const html = `\n            <h3>Welcome ${user}!</h3>\n            <p>1. Press Authenticate</p>\n            <p>2. Enter pid</p>\n            <p>3. Press Upload</p>\n            <input type=\"text\" id=\"pid\" name=\"pid\" placeholder=\"pid\" value=\"${pid}\" />\n            <button onclick=\"onUpload()\">Upload</button>\n            <div><div id=\"file-list\" /></div>\n            <div><div id=\"image-list\" /></div>\n            <br/>\n            <br/>\n            <button onclick=\"onLogout()\">Logout</button>\n          `\n    document.getElementById(divId).innerHTML = html\n  })\n}\n\nfunction updateImageList () {\n  const pid = document.getElementById('pid').value\n  const query = `\n  {\n  \tproject(id: \"${pid}\") {\n      allImages {\n        totalCount\n        edges {\n          node {\n            id\n            state\n            name\n            filename\n          }\n        }\n      }\n    }\n  }\n  `\n  gql({ query, token: ALTI_TOKEN }).then(res => {\n    const imgs = res.data.project.allImages.edges.map(x => `<li>${x.node.name}: ${x.node.state}</li>`)\n    document.getElementById('image-list').innerHTML = `<p>Project images:</p><ol>${imgs}</ol>`\n  })\n}\n\n// function onSuccess (files) {\n//   selectedFiles = []\n//   const fileNames = []\n//   for (let i = 0; i < files.length; i++) {\n//     fileNames.push(`<li>${files[i].name}</li>`)\n//     selectedFiles.push(files[i])\n//   }\n//   document.getElementById('file-list').innerHTML = `<p>Selected files:</p><ol>${fileNames.join('')}</ol>`\n// }\n\n// A simple callback implementation.\nfunction pickerCallback (data) {\n  let url = 'nothing'\n  if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n    var doc = data[google.picker.Response.DOCUMENTS][0]\n    url = doc[google.picker.Document.URL]\n  }\n  const message = 'You picked: ' + url\n  console.log(message)\n}\n\nfunction render (divId) {\n  const tokenCookie = getCookie('token')\n  if (!tokenCookie) {\n  // not login\n    const { token, state } = tokenStateFromHash()\n    if (token && state) {\n    // callback\n      const prevState = getCookie('state')\n      if (state !== prevState) {\n        document.getElementById(divId).innerHTML = '<h1>Invalid state!</h1>'\n      } else {\n        setCookie('token', token, 90)\n        deleteCookie('state')\n        ALTI_TOKEN = tokenCookie\n        window.location = `${window.location.origin}/${window.location.pathname}`\n        renderUpload(divId, token)\n        // setupGoogleDrive()\n      }\n    } else {\n    // render auth button\n      const state = randomState(20)\n      setCookie('state', state)\n      const authUrl = `https://api.altizure.com/auth/start?client_id=${ALTI_KEY}&response_type=token&redirect_uri=${ALTI_CALLBACK}&state=${state}`\n      document.getElementById(divId).innerHTML = `\n            <h1>Altizure Google Drive Demo</h1>\n            <button type='reset' onclick=\"location.href='${authUrl}'\">\n              Login with Altizure account\n            </button>\n          `\n    }\n  } else {\n    ALTI_TOKEN = tokenCookie\n    renderUpload(divId, tokenCookie)\n    // setupGoogleDrive()\n  }\n}\n\nexport {\n  onLogout,\n  onUpload,\n  pickerCallback,\n  render\n}\n","/* global gapi, google */\nimport {\n  G_CLIENT_ID,\n  G_DEV_KEY,\n  G_SCOPE\n} from './config'\n\nlet pickerApiLoaded = false\nlet oauthToken\nlet callback\n\nfunction setupGoogle (pickerCallback) {\n  callback = pickerCallback\n  return onApiLoad\n}\n\n// Use the API Loader script to load google.picker and gapi.auth.\nfunction onApiLoad () {\n  gapi.load('auth2', onAuthApiLoad)\n  gapi.load('picker', onPickerApiLoad)\n}\n\nfunction onAuthApiLoad () {\n  console.log('nat nat?')\n  const authBtn = document.getElementById('auth')\n  authBtn.disabled = false\n  authBtn.addEventListener('click', function () {\n    gapi.auth2.authorize({\n      client_id: G_CLIENT_ID,\n      scope: G_SCOPE\n    }, handleAuthResult)\n  })\n}\n\nfunction onPickerApiLoad () {\n  pickerApiLoaded = true\n  createPicker()\n}\n\nfunction handleAuthResult (authResult) {\n  if (authResult && !authResult.error) {\n    oauthToken = authResult.access_token\n    createPicker()\n  }\n}\n\n// Create and render a Picker object for picking user Photos.\nfunction createPicker () {\n  if (pickerApiLoaded && oauthToken) {\n    const picker = new google.picker.PickerBuilder()\n      .addView(google.picker.ViewId.DOCS_IMAGES)\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(G_DEV_KEY)\n      .setCallback(callback)\n      .build()\n    picker.setVisible(true)\n  }\n}\n\nexport default setupGoogle\n","import {\n  onLogout,\n  onUpload,\n  pickerCallback,\n  render\n} from './altizure'\n\nimport setupGoogle from './google'\n\nglobal.onUpload = onUpload\nglobal.onLogout = onLogout\n\nglobal.onApiLoad = setupGoogle(pickerCallback)\nrender('altizure-container')\n"]}